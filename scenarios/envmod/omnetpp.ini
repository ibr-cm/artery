[General]
sim-time-limit = 100s
debug-on-errors = true
print-undisposed = true

cmdenv-express-mode = true
cmdenv-autoflush = true

# result-dir = /tmp/realistic-perception/
result-dir = /net/i4/opt/tmpssd/willecke/realistic-perception/results

**.scalar-recording = false
**.vector-recording = false

*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"
*.traci.launcher.sumo = "sumo"
*.traci.launcher.extraOptions = " --lanechange.duration 3"
*.traci.launcher.extraOptions = "--output-prefix sumologs/${runnumber}"

repeat = 5

num-rngs = 2
*.traci.mapper.rng-0 = 1

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")

[Config envmod]
network = artery.envmod.World
**.identityRegistryModule = "idRegistry"
*.traci.mapper.vehicleType = "artery.envmod.Car"
*.environmentModel.drawObstacles = true
*.environmentModel.drawVehicles = true
*.environmentModel.obstacleTypes = "building shop"
*.environmentModel.traciModule = "traci"
*.environmentModel.nodeMobilityModule = ".mobility"
*.node[*].middleware.services = xmldoc("services-envmod.xml")
*.node[*].environmentModel.sensors = xmldoc("sensors-envmod.xml")
*.node[*].environmentModel.*.drawSensorCone = true
*.node[*].environmentModel.*.drawLinesOfSight = true
*.node[*].environmentModel.*.drawDetectedObjects = true
*.node[*].environmentModel.*.drawBlockingObstacles = true

*.node[*].environmentModel.FrontLongRangeRadar.fovRange = 250m
*.node[*].environmentModel.FrontLongRangeRadar.fovAngle = 18
*.node[*].environmentModel.FrontShortRangeRadar.numSegments = 6

*.node[*].environmentModel.FrontShortRangeRadar.fovRange = 100m
*.node[*].environmentModel.FrontShortRangeRadar.fovAngle = 120
*.node[*].environmentModel.FrontShortRangeRadar.numSegments = 6

*.node[*].environmentModel.**.scalar-recording = true
*.node[*].environmentModel.**.vector-recording = true
*.node[*].environmentModel.**.result-recording-modes = +vector
*.node[*].environmentModel.**.statistic-recording  = true

output-vector-file = ${resultdir}/${configname}_${scenarioName}_${sensorConf}_${datetime}_${runnumber}.vec
output-scalar-file = ${resultdir}/${configname}_${scenarioName}_${sensorConf}_${datetime}_${runnumber}.sca
eventlog-file =      ${resultdir}/${configname}_${scenarioName}_${sensorConf}_${datetime}_${runnumber}.elog
snapshot-file =      ${resultdir}/${configname}_${scenarioName}_${sensorConf}_${datetime}_${runnumber}.snap

[Config realistic-perception-baseline]
extends = envmod
*.scenarioName = ${scenarioName = erlangen, showcase}
*.traci.launcher.sumocfg = ${"erlangen.sumo.cfg", "envmod_test.sumocfg" ! scenarioName}
*.node[*].environmentModel.sensors = xmldoc("sensors-${sensorConf = baseline}.xml")


[Config realistic-perception-performance]
extends = envmod
**.scenarioName = ${scenarioName = erlangen, showcase}
*.traci.launcher.sumocfg = ${"erlangen.sumo.cfg", "envmod_test.sumocfg" ! scenarioName}
*.node[*].environmentModel.sensors = xmldoc("sensors-${sensorConf = indiviudal, realistic}.xml")

*.node[*].environmentModel.*.drawObjectWrapper = true
*.node[*].environmentModel.*.drawObjectWrapper = true
*.node[*].environmentModel.*.drawResolution = true
